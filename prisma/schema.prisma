// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  username         String
  image            String
  isOnboarded      Boolean     @default(false)
  bio              String
  userId           String      @unique
  hasNotifications Boolean     @default(false)
  comments         Comment[]
  followers        Followers[]
  following        Following[]
  likes            Like[]
  threads          Thread[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Thread {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  thread      String
  replyStatus ReplyStatus @default(anyone)
  attachments Media[]
  creatorId   String      @db.ObjectId
  likes       Like[]
  comments    Comment[]
  creator     User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([creatorId])
}

model Comment {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  creatorId   String      @db.ObjectId
  creator     User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  content     String
  threadId    String      @db.ObjectId
  replyStatus ReplyStatus @default(anyone)
  thread      Thread      @relation(fields: [threadId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([threadId])
  @@index([creatorId])
}

model Media {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  type     String
  url      String
  threadId String @db.ObjectId
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([threadId])
}

model Like {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  threadId String @db.ObjectId
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Followers {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  followersId String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model Following {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  followingId String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

enum ReplyStatus {
  anyone
  followers
  mentioned
}
